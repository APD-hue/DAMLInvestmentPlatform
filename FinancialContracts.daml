module FinancialContracts where

-- Import necessary modules
import DA.Date
import DA.List

-- Define a core template for financial contracts
template Contract
  with
    issuer : Party
    counterparty : Party
    contractType : Text  -- Identifier for the type of contract
    contractData : ContractData  -- Structured data type for contract details
  where
    signatory issuer
    observer counterparty
    -- Add additional observers as needed

    controller issuer can
      IssueContract : ContractId Contract
        with
          counterparty : Party
          contractType : Text
          contractData : ContractData
        do
          create this with
            counterparty = counterparty
            contractType = contractType
            contractData = contractData

    controller counterparty can
      TransferContract : ContractId Contract
        with
          newCounterparty : Party
        do
          assertMsg (issuer /= newCounterparty) "Cannot transfer to the issuer"
          create this with counterparty = newCounterparty
      -- Add other actions that counterparty can perform

-- Define a structured data type for contract details
data ContractData = 
  MunicipalBondData {
    maturityDate : Date,
    principalAmount : Decimal,
    couponRate : Decimal
  }
  | VentureCapitalFundData {
    fundManager : Party,
    portfolioCompanies : [Party]
  }
  -- Add more variants as needed for other contract types
  deriving (Eq, Show)

-- Utility function to calculate maturity date for contracts
calculateMaturityDate : ContractData -> Date
calculateMaturityDate contractData =
  case contractData of
    MunicipalBondData { maturityDate = maturity } -> maturity
    _ -> error "Contract type not supported for maturity calculation"

-- Utility function to list all contracts by type
template ListContracts
  with
    contracts : [ContractId Contract]
  where
    signatory contracts

-- Example scenarios (can be used for testing)
template ExampleScenario
  with
    scenarioName : Text
  where
    signatory scenarioName
